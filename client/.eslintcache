[{"/Users/gregburroughs/Desktop/Coding_Dojo/Dojo_Assignments/MERN_stack/MERNBelt/client/src/index.js":"1","/Users/gregburroughs/Desktop/Coding_Dojo/Dojo_Assignments/MERN_stack/MERNBelt/client/src/reportWebVitals.js":"2","/Users/gregburroughs/Desktop/Coding_Dojo/Dojo_Assignments/MERN_stack/MERNBelt/client/src/App.js":"3","/Users/gregburroughs/Desktop/Coding_Dojo/Dojo_Assignments/MERN_stack/MERNBelt/client/src/views/Main.js":"4","/Users/gregburroughs/Desktop/Coding_Dojo/Dojo_Assignments/MERN_stack/MERNBelt/client/src/views/Display.js":"5","/Users/gregburroughs/Desktop/Coding_Dojo/Dojo_Assignments/MERN_stack/MERNBelt/client/src/views/Create.js":"6","/Users/gregburroughs/Desktop/Coding_Dojo/Dojo_Assignments/MERN_stack/MERNBelt/client/src/components/Form.jsx":"7","/Users/gregburroughs/Desktop/Coding_Dojo/Dojo_Assignments/MERN_stack/MERNBelt/client/src/components/OtherForm.jsx":"8"},{"size":500,"mtime":1611260639885,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1611260639887,"results":"11","hashOfConfig":"10"},{"size":411,"mtime":1611346786763,"results":"12","hashOfConfig":"10"},{"size":3856,"mtime":1611350315111,"results":"13","hashOfConfig":"10"},{"size":2230,"mtime":1611352866371,"results":"14","hashOfConfig":"10"},{"size":1100,"mtime":1611351584016,"results":"15","hashOfConfig":"10"},{"size":5993,"mtime":1611351041698,"results":"16","hashOfConfig":"10"},{"size":6676,"mtime":1611359329963,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"vyqji9",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},"/Users/gregburroughs/Desktop/Coding_Dojo/Dojo_Assignments/MERN_stack/MERNBelt/client/src/index.js",[],["40","41"],"/Users/gregburroughs/Desktop/Coding_Dojo/Dojo_Assignments/MERN_stack/MERNBelt/client/src/reportWebVitals.js",[],"/Users/gregburroughs/Desktop/Coding_Dojo/Dojo_Assignments/MERN_stack/MERNBelt/client/src/App.js",[],"/Users/gregburroughs/Desktop/Coding_Dojo/Dojo_Assignments/MERN_stack/MERNBelt/client/src/views/Main.js",["42","43","44"],"import React, {useState, useEffect } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { Link, navigate } from '@reach/router';\nimport axios from 'axios';\nimport {\n    Paper,\n    Card,\n    Button,\n    makeStyles\n} from '@material-ui/core';\n\nconst styles = {\n    paper: {\n        width: \"60rem\",\n        padding: \"1rem\",\n        margin: \"auto\"\n    },\n    table: {\n        minWidth: 650,\n    },\n}\n\nconst useStyles = makeStyles({\n    paper: {\n        width: \"50rem\",\n        padding: \"1rem\",\n        margin: \"auto\",\n        \n    },\n    card: {\n        width: \"40rem\",\n        padding: \"3rem\",\n        margin: \"auto\"\n    },\n    pics: {\n        width: \"10rem\"\n    }\n});\n\n\nexport default () => {\n    const classes = useStyles();\n    const [ pirates, setPirates ] = useState([]);\n    const [ loaded, setLoaded ] = useState(false);\n\n    useEffect(() => {\n        axios.get('http://localhost:8000/api/pirates')\n            .then(res => {\n                setPirates(res.data);\n                setLoaded(true);\n            })\n            .catch(err => console.log(err))\n    })\n\n    const removeFromDom = pirateId => {\n        setPirates(pirates.filter(pirate => pirate._id !== pirateId))\n    }\n\n    const deletePirate = (pirateId) => {\n        axios.delete('http://localhost:8000/api/pirates/' + pirateId)\n            .then(res => {\n                removeFromDom(pirateId)\n            })\n    }\n\n    const sortedPirates = pirates.sort((a,b) => a.name.localeCompare(b.name));\n\n    return (\n        <Card>  \n            <div className=\"topBar\">\n            <h1>Pirate Crew</h1>\n            <Button \n                onClick={ () => navigate(\"/pirates/new\")}\n                variant=\"contained\" \n                color=\"primary\"\n            >\n                Add Pirate</Button>\n            </div>\n            <Paper elevation={3} >\n            { loaded?\n                <TableContainer component={Paper}>\n                    <Table style={styles.table} size=\"small\" aria-label=\"a dense table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Pirate Selfie </TableCell>\n                                <TableCell>Pirate Name </TableCell>\n                                <TableCell align=\"right\">Actions</TableCell>\n                            </TableRow>\n                        </TableHead>\n                    <TableBody>\n                        {sortedPirates.map((pirate) => (\n                            <TableRow key={pirate.name}>\n                                \n                                <TableCell component=\"th\" scope=\"row\">\n                                    <img className={classes.pics} src={pirate.imageUrl} />\n                                </TableCell>\n\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {pirate.name}\n                                </TableCell>\n\n                                <TableCell component=\"th\" scope=\"row\">\n                                    <Button onClick={(e) => {navigate(`/pirates/${pirate._id}`)}} variant=\"contained\" color=\"primary\"> View Pirate</Button>\n                                    <Button onClick={(e) => {deletePirate(pirate._id)}} variant=\"contained\" color=\"secondary\"> Walk the Plank!</Button>\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                    </Table>\n                </TableContainer>:\n                \"\"\n            }\n\n            </Paper>\n\n        </Card>\n    )\n}","/Users/gregburroughs/Desktop/Coding_Dojo/Dojo_Assignments/MERN_stack/MERNBelt/client/src/views/Display.js",["45","46","47"],"import React, {useEffect, useState} from 'react'\nimport axios from 'axios';\nimport { navigate } from \"@reach/router\";\nimport {\n    Paper,\n    Card,\n    Button,\n    makeStyles\n} from '@material-ui/core';\n\nconst useStyles = makeStyles({\n    paper: {\n        width: \"50rem\",\n        padding: \"1rem\",\n        margin: \"auto\",\n        \n    },\n    card: {\n        width: \"40rem\",\n        padding: \"3rem\",\n        margin: \"auto\"\n    },\n    pic: {\n        width: \"10rem\"\n    }\n});\n\nexport default (props) => {\n    const { id } = props;\n    const [ pirate, setPirate ] = useState(\"\")\n    const classes = useStyles();\n\n    axios.get('http://localhost:8000/api/pirates/' + id)\n        .then(res => {\n            console.log(res.data)\n            setPirate(res.data)\n        })\n        .catch(err => console.log(err))\n\n    return(\n        <Card>  \n            <div className=\"topBar\">\n                    <div>\n                    <h1>{pirate.name}</h1>\n                    <Button \n                        onClick={ () => navigate(\"/pirates\")}\n                        variant=\"contained\" \n                        color=\"primary\"\n                        >\n                        Crew Board</Button>\n\n                    <Paper elevation={3} >\n                        <div>\n                            <img className={classes.pic} src={pirate.imageUrl} />\n                            <h3>{pirate.catchphrase}</h3>\n                        </div>\n                        <div>\n                            <h2>About: </h2>\n                            <p>Position: {pirate.position}</p> \n                            <p>Treasures: {pirate.chests}</p>\n                            <p>Peg Leg: {pirate.pegLeg}\n                                { pirate.pegLeg? <p>Yes</p>: <p>No</p>}  \n                            </p>\n                            <p>Eye Patch: \n                                { pirate.eyePatch? <p>Yes</p>: <p>No</p>}\n                            </p>\n                            <p>Hook Hand: \n                                { pirate.hookHand? <p>Yes</p>: <p>No</p>}\n                            </p>\n                        </div>\n\n                    </Paper> \n                    </div> \n\n            </div>\n        </Card>\n    )\n}\n","/Users/gregburroughs/Desktop/Coding_Dojo/Dojo_Assignments/MERN_stack/MERNBelt/client/src/views/Create.js",["48","49","50","51","52"],"import React, {useState, useEffect} from 'react'\nimport axios from 'axios'\nimport { navigate } from '@reach/router';\n\nimport {\n    Paper,\n    Card,\n    Button,\n    makeStyles\n} from '@material-ui/core';\nimport Form from '../components/Form';\nimport OtherForm from '../components/OtherForm';\n\nconst useStyles = makeStyles({\n    paper: {\n        width: \"60rem\",\n        padding: \"1rem\",\n        margin: \"auto\",\n        \n    },\n    card: {\n        width: \"60rem\",\n        padding: \"3rem\",\n        margin: \"auto\"\n    },\n    button: {\n        margin: \"1rem\"\n    }\n});\n\n\nexport default () => {\n    const classes = useStyles();\n\n    return (\n        <Card>  \n            <div className=\"topBar\">\n            <h1>Add Pirate</h1>\n            <Button \n                className={classes.button}\n                onClick={ () => navigate(\"/pirates\")}\n                variant=\"contained\" \n                color=\"primary\"\n            >\n                Crew Board</Button>\n            </div>\n            <Paper elevation={3} >\n                <OtherForm />\n            </Paper>\n            \n\n        </Card>\n    )\n}","/Users/gregburroughs/Desktop/Coding_Dojo/Dojo_Assignments/MERN_stack/MERNBelt/client/src/components/Form.jsx",["53","54"],"import React, { useState } from 'react'\nimport { Link, navigate } from '@reach/router'\nimport {\n    Paper,\n    FormControl,\n    InputLabel,\n    OutlinedInput,\n    Button,\n    makeStyles\n} from '@material-ui/core';\nimport axios from 'axios';\n\nconst useStyles = makeStyles({\n    paper: {\n        width: \"60rem\", padding: \"1rem\",\n        margin: \"auto\"\n    },\n    input: {\n        marginBottom: \"1rem\"\n    },\n    button: {\n        width: \"100%\",\n        display: 'block',\n        \n    },\n    dropdown: {\n        margin: \"1rem\"\n    }\n    // formControl: {\n    //     minWidth: 120,\n    // },\n});\n\nexport default () => {\n    const classes = useStyles();\n    const [name, setName] = useState(\"\");\n    const [ position, setPosition ] = useState(\"\")\n    const [ chests, setChests ] = useState();\n    const [ catchphrase, setCatchphrase ] = useState(\"\");\n    const [ imageUrl, setImageUrl ] = useState(\"\");\n    const [ errors, setErrors ] = useState([]);\n    const [ pegLeg, setPegLeg ] = useState(false);\n    const [ eyePatch, setEyePatch ] = useState(false);\n    const [ hookHand, setHookHand ] = useState(false);\n\n\n    const createPirate = (e) => {\n        e.preventDefault();\n        const myPirate = { name, position, chests, imageUrl, catchphrase, pegLeg, eyePatch, hookHand }\n        axios.post('http://localhost:8000/api/pirates/new', myPirate)\n            .then(res => {navigate(\"/pirates\")})\n            .catch(err => {\n                const errorResponse = err.response.data.errors;\n                const errorArr = [];\n                for(const key of Object.keys(errorResponse)) {\n                    errorArr.push(errorResponse[key].message)\n                }\n                setErrors(errorArr);\n            })\n    }    \n\n    return (\n        <Paper elevation={3} className={classes.paper}>\n                \n                <form onSubmit = { createPirate } >\n                {\n                    errors?\n                        (errors.map((err, index) => <p key={index}>{err}</p>)):\n                        \"\"\n                }\n                    <FormControl variant=\"outlined\" className={classes.input}>\n                        <InputLabel>Pirate Name</InputLabel>\n                        <OutlinedInput type=\"text\"\n                                        name=\"name\"\n                                        value={name}\n                                        onChange = { (e) => setName(e.target.value)}\n                                        />\n                    </FormControl>\n                    <br />\n\n                    <FormControl variant=\"outlined\" className={classes.input}>\n                        <InputLabel>Image URL</InputLabel>\n                        <OutlinedInput type=\"text\"\n                                        name=\"imageUrl\"\n                                        value={imageUrl}\n                                        onChange = {(e) => setImageUrl(e.target.value)}\n                                        />\n                    </FormControl>\n                    <br />\n\n                        <label>Number of Chests:</label>\n                        <select className={classes.dropdown} name=\"chests\" onSubmit={(e) => setChests(e.target.value)}>\n                            <option value={0}>0</option>\n                            <option value={1}>1</option>\n                            <option value={2}>2</option>\n                            <option value={3}>3</option>\n                            <option value={4}>4</option>\n                            <option value={5}>5</option>\n                            <option value={6}>6</option>\n                        </select>\n\n                    <br />\n\n                    <FormControl variant=\"outlined\" className={classes.input}>\n                        <InputLabel>Pirate Catchphrase</InputLabel>\n                        <OutlinedInput type=\"text\"\n                                        name=\"catchphrase\"\n                                        value={catchphrase}\n                                        onChange = {(e) => setCatchphrase(e.target.value)}\n                                        />\n                    </FormControl>\n                    <br />\n\n                        <label>Crew Position:</label>\n                        <select className={classes.dropdown} name=\"position\" onSubmit={(e) => setPosition(e.target.value)}>\n                            <option value={\"Captain\"}>Captain</option>\n                            <option value={\"First Mate\"}>First Mate</option>\n                            <option value={\"Quarter Master\"}>Quarter Master</option>\n                            <option value={\"Boatswain\"}>Boatswain</option>\n                            <option value={\"Powder Monkey\"}>Powder Monkey</option>\n                        </select>\n\n                    <br />\n\n                    <label>Peg Leg</label>\n                    <input \n                        type=\"checkbox\" \n                        id=\"pegLeg\"\n                        name=\"pegLeg\"\n                        value=\"true\"\n                        checked={(e) => setPegLeg(true)}\n                        />\n                    <br />\n\n                    <label>Eye Patch</label>\n                    <input \n                        type=\"checkbox\" \n                        name=\"eyePatch\"\n                        value={false}\n                        checked={(e) => setEyePatch(true)}\n                    />\n                    <br />\n\n                    <label>Hook Hand</label>\n                    <input \n                        type=\"checkbox\" \n                        name=\"hookHand\"\n                        value={false}\n                        checked={(e) => setHookHand(true)}\n                        />\n                    <br />\n                    <br />\n                    \n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                        ADD PIRATE\n                    </Button>\n\n                </form>\n            </Paper>\n\n    )\n}","/Users/gregburroughs/Desktop/Coding_Dojo/Dojo_Assignments/MERN_stack/MERNBelt/client/src/components/OtherForm.jsx",["55","56","57"],"import React, {useState} from 'react'\nimport { makeStyles } from '@material-ui/core'\nimport axios from 'axios'\nimport { Link, navigate } from '@reach/router'\n\nconst useStyles = makeStyles({\n    paper: {\n        width: \"60rem\", padding: \"1rem\",\n        margin: \"auto\"\n    },\n    input: {\n        marginBottom: \"1rem\"\n    },\n    button: {\n        width: \"100%\",\n        display: 'block',\n        \n    },\n    dropdown: {\n        margin: \"1rem\"\n    }\n    // formControl: {\n    //     minWidth: 120,\n    // },\n});\n\nexport default () => {\n    const [name, setName] = useState(\"\");\n    const [ position, setPosition ] = useState(\"\")\n    const [ chests, setChests ] = useState();\n    const [ catchphrase, setCatchphrase ] = useState(\"\");\n    const [ imageUrl, setImageUrl ] = useState(\"\");\n    const [ errors, setErrors ] = useState([]);\n    const [ pegLeg, setPegLeg ] = useState(false);\n    const [ eyePatch, setEyePatch ] = useState(false);\n    const [ hookHand, setHookHand ] = useState(false);\n    const classes = useStyles();\n    const [ nameError, setNameError ] = useState(\"\");\n    const [ imageError, setImageError ] = useState(\"\");\n    const [ catchPhraseError, setCatchphraseError ] = useState(\"\");\n\n    const handleName = e => {\n        setName(e.target.value);\n        if(e.target.value.length < 1) {\n            setNameError(\"Name is required\")\n        }else if(e.target.value.length < 3){\n            setNameError(\"Name must be at least 3 characters\")\n        } else if(e.target.value.length > 2) {\n            setNameError(\"\");\n        }\n    }\n\n    const handleImage = e => {\n        setImageUrl(e.target.value);\n        if(e.target.value.length < 1) {\n            setImageError(\"URL is required\")\n        }else if(e.target.value.length < 6){\n            setImageError(\"Image URL must be at least 6 characters\")\n        } else if(e.target.value.length > 5) {\n            setImageError(\"\");\n        }\n    }\n\n    const handleCatchPhrase = e => {\n        setCatchphrase(e.target.value);\n        if(e.target.value.length < 1) {\n            setCatchphraseError(\"Catchphrase is required\")\n        }else if(e.target.value.length < 3){\n            setCatchphraseError(\"Catchphrase must be at least 3 characters\")\n        } else if(e.target.value.length > 2) {\n            setCatchphraseError(\"\");\n        }\n    }\n\n    const createPirate = (e) => {\n        e.preventDefault();\n        const myPirate = { name, position, chests, imageUrl, catchphrase, pegLeg, eyePatch, hookHand }\n        axios.post('http://localhost:8000/api/pirates/new', myPirate)\n            .then(res => {navigate(\"/pirates\")})\n            .catch(err => {\n                const errorResponse = err.response.data.errors;\n                const errorArr = [];\n                for(const key of Object.keys(errorResponse)) {\n                    errorArr.push(errorResponse[key].message)\n                }\n                setErrors(errorArr);\n            })\n    }  \n\n    return( \n\n\n<form onSubmit = { createPirate } >\n                {\n                    errors?\n                        (errors.map((err, index) => <p key={index}>{err}</p>)):\n                        \"\"\n                }\n                { nameError? <p>{nameError}</p>: \"\"}\n                <label>Pirate Name: </label>\n                <input \n                    type=\"text\" \n                    name=\"name\" \n                    value={name}\n                    onChange = { handleName }\n                    />\n                    <br/>\n\n                    { imageError? <p>{imageError}</p>: \"\"}\n                <label>Image URL: </label>\n                <input \n                    type=\"text\" \n                    name=\"imageUrl\" \n                    value={imageUrl}\n                    onChange = { handleImage }\n                    />\n                    <br/>\n\n\n                {/* <label>Number of Chests:</label>\n                        <input className={classes.dropdown} \n                            type=\"number\"\n                            name=\"chests\" \n                            onChange={(e) => setChests(e.target.value)}>    \n                        </input>\n                <br /> */}\n\n                <label>Number of Chests:</label>\n                    <select\n                        name=\"chests\"\n                        onChange={(e) => setChests(e.target.value)}\n                        >\n                        <option selected=\"true\" disabled=\"disabled\">Choose A Position</option>\n                        <option value=\"0\">0</option>\n                        <option value=\"1\">1</option>\n                        <option value=\"2\">2</option>\n                        <option value=\"3\">3</option>\n                        <option value=\"4\">4</option>\n                        <option value=\"5\">5</option>\n                        <option value=\"6\">6</option>\n                    </select>\n                <br/>\n\n                { catchPhraseError? <p>{catchPhraseError}</p>: \"\"}\n                <label>Pirate Catchphrase: </label>\n                <input \n                    type=\"text\" \n                    name=\"catchphrase\" \n                    value={catchphrase}\n                    onChange = { handleCatchPhrase }\n                    />\n                    <br/>\n\n                <label>Crew Position:</label>\n                <select \n                    name=\"position\" \n                    onChange={(e) => setPosition(e.target.value)}>\n                        <option selected=\"true\" disabled=\"disabled\">Choose A Position</option>\n                        <option value=\"Captain\">Captain</option>\n                        <option value=\"First Mate\">First Mate</option>\n                        <option value=\"Boatswain\">Boatswain</option>\n                        <option value=\"Powder Monkey\">Powder Monkey</option>\n                </select>\n\n                <br />\n\n                <label>Peg Leg</label>\n                <input \n                type=\"checkbox\" \n                id=\"pegLeg\"\n                name=\"pegLeg\"\n                value=\"true\"\n                onClick={(e)=>setPegLeg(true)}\n                />\n                <br />\n\n                <label>Eye Patch</label>\n                <input \n                type=\"checkbox\" \n                name=\"eyePatch\"\n                value={true}\n                onClick={(e) => setEyePatch(true)}\n                />\n                <br />\n\n                <label>Hook Hand</label>\n                <input \n                type=\"checkbox\" \n                name=\"hookHand\"\n                onClick={(e) => setHookHand(true)}\n                \n                />\n                <br />\n                <br />\n            <input type=\"submit\" />\n        </form>\n    )\n}",{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":8,"column":10,"nodeType":"64","messageId":"65","endLine":8,"endColumn":14},{"ruleId":"66","severity":1,"message":"67","line":46,"column":1,"nodeType":"68","endLine":123,"endColumn":2},{"ruleId":"69","severity":1,"message":"70","line":100,"column":37,"nodeType":"71","endLine":100,"endColumn":91},{"ruleId":"62","severity":1,"message":"72","line":1,"column":16,"nodeType":"64","messageId":"65","endLine":1,"endColumn":25},{"ruleId":"66","severity":1,"message":"67","line":28,"column":1,"nodeType":"68","endLine":78,"endColumn":2},{"ruleId":"69","severity":1,"message":"70","line":54,"column":29,"nodeType":"71","endLine":54,"endColumn":82},{"ruleId":"62","severity":1,"message":"73","line":1,"column":16,"nodeType":"64","messageId":"65","endLine":1,"endColumn":24},{"ruleId":"62","severity":1,"message":"72","line":1,"column":26,"nodeType":"64","messageId":"65","endLine":1,"endColumn":35},{"ruleId":"62","severity":1,"message":"74","line":2,"column":8,"nodeType":"64","messageId":"65","endLine":2,"endColumn":13},{"ruleId":"62","severity":1,"message":"75","line":11,"column":8,"nodeType":"64","messageId":"65","endLine":11,"endColumn":12},{"ruleId":"66","severity":1,"message":"67","line":32,"column":1,"nodeType":"68","endLine":54,"endColumn":2},{"ruleId":"62","severity":1,"message":"63","line":2,"column":10,"nodeType":"64","messageId":"65","endLine":2,"endColumn":14},{"ruleId":"66","severity":1,"message":"67","line":34,"column":1,"nodeType":"68","endLine":162,"endColumn":2},{"ruleId":"62","severity":1,"message":"63","line":4,"column":10,"nodeType":"64","messageId":"65","endLine":4,"endColumn":14},{"ruleId":"66","severity":1,"message":"67","line":27,"column":1,"nodeType":"68","endLine":198,"endColumn":2},{"ruleId":"62","severity":1,"message":"76","line":37,"column":11,"nodeType":"64","messageId":"65","endLine":37,"endColumn":18},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","'useState' is defined but never used.","'axios' is defined but never used.","'Form' is defined but never used.","'classes' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]